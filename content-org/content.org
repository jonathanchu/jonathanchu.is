#+hugo_base_dir: ..
* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
** Dark Mode Toggle for iTerm and Emacs                            :emacs:
 :PROPERTIES:
 :EXPORT_DATE: 2020-07-12T00:00:00-04:00
 :EXPORT_DESCRIPTION: "How to do dark and light mode toggle with iTerm and Emacs“
 :EXPORT_FILE_NAME: dark-mode-toggle-emacs-iterm
 :END:
For most of my life, I've always preferred a dark theme when it comes to coding whether I'm in Emacs or the terminal. Lately though, the past two years specifically, I've switched to a light theme for both Emacs and iTerm. I really don't have a better rationale other than I feel like the lighter theme means it's "work" time and helps me focus, whereas a dark theme would be more suitable if I was coding at night and wanted to save some eye strain from a full day of looking at a computer screen.

With that said, I've definitely utilized Mac OS X's dark mode toggle and the one thing that has bothered me was the white glare of my Emacs and terminal when I was coding at night.  I wrote up a series of scripts inspired by Anantha Kumaran's excellent post on this exact issue called [[https://ananthakumaran.in/2020/05/09/dark-mode-toggle.html][Dark Mode Toggle]].

Now, I can type a single command in terminal and it would change to a dark theme in both Emacs and iTerm.

[[/images/emacs-iterm-light-dark-toggle.gif]]

And here are the scripts that I wrangled together to achieve this:

Toggle to a dark Emacs theme:

Filename: emacs-dark-theme
#+NAME: emacs-dark-theme
#+BEGIN_SRC bash
#!/bin/sh
set -e

if pgrep Emacs > /dev/null; then
    emacsclient --eval "(load-theme 'doom-one t)" > /dev/null
fi
#+END_SRC

Toggle to a dark iTerm color scheme using AppleScript and iTerm's Python API:

Filename: iterm2_dark_theme.py
#+NAME: iterm2_dark_theme.py
#+BEGIN_SRC python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import iterm2

async def main(connection):
    # Get the color preset we'd like
    preset = await iterm2.ColorPreset.async_get(connection, "One Dark")
    profiles = await iterm2.PartialProfile.async_query(connection)
    for partial in profiles:
        # Fetch the full profile and then set the color preset in it
        profile = await partial.async_get_full_profile()
        await profile.async_set_color_preset(preset)

iterm2.run_until_complete(main)
#+END_SRC

Call the iTerm Python script via AppleScript:

Filename: iterm-dark-theme
#+NAME: iterm-dark-theme
#+BEGIN_SRC bash
tell application "iTerm2"
    launch API script named "iterm2_dark_theme.py"
end tell
#+END_SRC

I combine calling these scripts with one command like so:

Filename: dark-mode
#+NAME: dark-mode
#+BEGIN_SRC bash
#!/bin/sh
set -e

/bin/bash /Users/jonathan/projects/dotfiles/bin/emacs-dark-theme
osascript /Users/jonathan/projects/dotfiles/bin/iterm-dark-theme
#+END_SRC

And now this all can be ran with just:

#+BEGIN_SRC shell
$ dark-mode
#+END_SRC

The same workflow can be done for switching back to a light theme by creating a new set of these scripts and modifying to the light theme you want!

Thank you to [[https://ananthakumaran.in/2020/05/09/dark-mode-toggle.html][Anantha Kumaran]] for this first post and all credit goes to him!

Happy (night) hacking!
** TODO New blog again
:PROPERTIES:
:EXPORT_DATE: 2020-07-12T00:00:00-04:00
:EXPORT_DESCRIPTION: "“
:EXPORT_FILE_NAME: new-blog-again-redux-two
:END:
Example post
** EmacsConf 2019 Magit Deep Dive
:PROPERTIES:
:EXPORT_DATE: 2020-04-07T00:00:00-04:00
:EXPORT_DESCRIPTION: "“
:EXPORT_FILE_NAME: emacsconf2019-magit-deep-dive
:END:
I was fortunate enough to get to present at EmacsConf 2019 in November of last year and I wanted to share the content from my presentation:

{{<youtube vS7YNdl64gY>}}

And here's the source for my org slides on GitHub:

https://github.com/jonathanchu/emacsconf-2019-magit-deep-dive
** Emacs, Notmuch, isync, and msmtp Setup                               :emacs:
:PROPERTIES:
:EXPORT_DATE: 2020-06-23T00:00:00-04:00
:EXPORT_DESCRIPTION: "How to setup notmuch, isync, and msmtp with Emacs.“
:EXPORT_FILE_NAME: emacs-notmuch-isync-msmtp-setup
:END:
I've been meaning to move my email management to Emacs for the past year and finally made the jump after see [[https://cestlaz.github.io/stories/emacs/][Mike Zamansky's]] video on this ([[https://www.youtube.com/watch?v=GlrsoIwJ-UM][YouTube]]). Here are my notes on how I got this all setup and configured.

This is an opinionated setup based on Mac OS X and Fastmail. First, make sure you have [[https://brew.sh/][Homebrew]] installed to install the packages needed.

**** Receiving email

[[https://notmuchmail.org/][Notmuch]] requires email to be stored on your local filesystem and one message per file. We'll be using =isync= for this.

#+BEGIN_SRC shell
$ brew install isync
#+END_SRC

http://isync.sourceforge.net/

You'll need to start out with an initial config which you can copy directly to your home directory.

My =.mbsyncrc= file looks like this:

#+BEGIN_SRC
# First section: remote IMAP account
IMAPAccount fastmail
Host imap.fastmail.com
Port 993
User jonathanchu@fastmail.com
# For simplicity, this is how to read the password from another file.
# For better security you should use GPG https://gnupg.org/
PassCmd "cat ~/.mbsync-fastmail"
SSLType IMAPS
SSLVersions TLSv1.2

IMAPStore fastmail-remote
Account fastmail

# This section describes the local storage
MaildirStore fastmail-local
Path ~/Maildir/
Inbox ~/Maildir/INBOX
SubFolders Verbatim

# This section a "channel", a connection between remote and local
Channel fastmail
Master :fastmail-remote:
Slave :fastmail-local:
Patterns *
Expunge None
CopyArrivalDate yes
Sync All
Create Slave
SyncState *
#+END_SRC

The contents of =.mbsync-fastmail= contains my email password, which is probably not the best way to do store a password like this locally so I should fix this in the near future.

Once this is configured and saved in your home directory, you can then run run =mbsync= to pull your email down locally:

#+BEGIN_SRC shell
$ mbsync -a
#+END_SRC

Note, you'll have to run this each time to retrieve new mail. I know some folks might elect to have this as a running cron job every x minutes - this can be entirely based on your preference and email workflow.

And finally, we just need to setup a search database for =notmuch= to work by running:

#+BEGIN_SRC shell
$ notmuch new
#+END_SRC

**** Viewing and writing email

We're going to use =Notmuch=, specifically in Emacs, to view our mail. First, you need to install =Notmuch= on your OS:

#+BEGIN_SRC shell
$ brew install notmuch
#+END_SRC

Once =notmuch= is installed, run the following command to setup =notmuch=. This will create a =.notmuch-config= in your home directory.

#+BEGIN_SRC shell
$ notmuch setup
#+END_SRC

When you have entered your email information, in your Emacs configuration, you can install =notmuch-emacs= by including the following:

#+BEGIN_SRC elisp
(use-package notmuch
  :ensure t
  :defer t)
#+END_SRC

Then, you can run =m-x notmuch-hello= and you will be greeted with the =notmuch= starting screen.

#+CAPTION: m-x notmuch-hello
#+NAME: fig:notmuch-hello
[[/images/notmuch-hello.png]]

#+CAPTION: notmuch unread
#+NAME: fig:notmuch unread
[[/images/notmuch-unread.png]]

**** Sending email
Next, we'll need to send our mail with something, so I chose =msmtp= because of how easy it was to configure.

#+BEGIN_SRC shell
$ brew install msmtp
#+END_SRC

The contents of my =.msmtprc= file looks like this:

#+BEGIN_SRC
defaults
auth on
protocol smtp
tls on

account fastmail
host smtp.fastmail.com
port 465
user jonathanchu@fastmail.com
passwordeval "cat ~/.mbsync-fastmail"
tls_starttls off
from jonathanchu@fastmail.com

account default : fastmail
#+END_SRC

This article will be updated as I refine my email process and work out the bugs, but at this point you should have working email with Notmuch in Emacs!

* Notes
:PROPERTIES:
:EXPORT_HUGO_SECTION: notes
:END:
** Leiningen Basics
:PROPERTIES:
:EXPORT_DATE: 2019-08-15T00:00:00-04:00
:EXPORT_FILE_NAME: leiningen-basics
:EXPORT_HUGO_CODE_FENCE: t
:END:
For Mac OS X, you can install =leiningen= via =homebrew=:
#+BEGIN_SRC shell
brew install leiningen
#+END_SRC
*** =lein run=
Runs the current leiningen project.
*** =lein uberjar=
Compiles the project in a standalone binary so it can be invoked by =java -jar target/uberjar/clojure-noob-0.1.0-SNAPSHOT-standalone.jar=.
*** =lein repl=
Start a REPL for experimenting with code.
** Paredit Basics
:PROPERTIES:
:EXPORT_DATE: 2019-08-15T00:00:00-04:00
:EXPORT_FILE_NAME: paredit-basics
:EXPORT_HUGO_CODE_FENCE: t
:END:
The =|= character is where our cursor is for purposes of visualizing where to invoke these methods.
*** =paredit-wrap-round=
Let's wrap the =2= here.
#+BEGIN_SRC emacs-lisp
(+ 1 |2 3 4)
;; Keybinding M-(
(+ 1 (2) 3 4)
#+END_SRC
*** =paredit-forward-slurp-sexp=
And after we wrap the =2=, we type =*= and want to slurp in the =3=.
#+BEGIN_SRC emacs-lisp
(+ 1 (* |2) 3 4)
;; Keybinding C-)
(+ 1 (* 2 3) 4)
#+END_SRC
*** =paredit-forward-barf-sexp=
Oops, we slurped in the =4= by accident!  Let's unslurp it by barfing it out.
#+BEGIN_SRC emacs-lisp
(+ 1 (* 2 3 |4))
;; Keybinding C-}
(+ 1 (* 2 3) 4)
#+END_SRC
*** =paredit-splice-sexp-killing-backward=
#+BEGIN_SRC emacs-lisp
(def process-bags
     (comp
      (mapcatting unbundled-pallet)
      (filtering non-food?)|
      (mapping heavy-label))pp)
;; Keybinding M-<up arrow>
(def process-bags
     (mapping heavy-label))
#+END_SRC
** Clojure Basics
:PROPERTIES:
:EXPORT_DATE: 2019-08-16T00:00:00-04:00
:EXPORT_FILE_NAME: clojure-basics
:EXPORT_HUGO_CODE_FENCE: t
:END:
These are my notes as I go through the book [[https://www.braveclojure.com/][Clojure for the Brave and True]]
*** Control Flow
**** if
#+BEGIN_SRC clojure
(if boolean-form
  then-form
  optional-else-form)
#+END_SRC
**** do
#+BEGIN_SRC clojure

#+END_SRC

**** when
#+BEGIN_SRC clojure

#+END_SRC

* Projects
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: projects
:END:
- dotemacs
- magit-git-toolbelt
- magit-git-plumbing
- atom-one-dark-theme
- emacs-horizon-theme
- emacs-powerline (deprecated)

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:
Hello! My name is Jonathan Chu and this is my personal website. I'm a
software engineer currently living in New Jersey with a passion for
Python web development. This site is intended to be a place to share
the things I've learned along the way.

In late 2010, I founded 3atmospheres, a web development shop based in
New York, where I consulted and worked with a variety of agencies,
small businesses, and startups in New York.  I've been a remote
engineer since 2011.

Here are some other places you can find me on the web:

-  [Twitter](https://twitter.com/jonathanchu)
-  [GitHub](https://github.com/jonathanchu)
-  [Instagram](https://instagram.com/jonathanchu/)
-  [Flickr](https://www.flickr.com/photos/jonnychu/)
-  [LinkedIn](https://www.linkedin.com/in/jonathanchu13)
-  [Keybase](https://keybase.io/jonathanchu)

You can email me anytime at [me@jonathanchu.is](mailto:me@jonathanchu.is).
